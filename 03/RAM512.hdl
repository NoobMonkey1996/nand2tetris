// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/b/RAM512.hdl
/**
 * Memory of 512 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */
CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];

    PARTS:
    //// Replace this comment with your code.
    // address flips round each time it scales up, RAM8 took 0..2 address at first, now when it scales up, it least the most significanct bits 6..8
    DMux8Way(in=load , sel= address[6..8], a=loadA , b=loadB , c=loadC , d=loadD , e=loadE , f=loadF , g=loadG , h=loadH );

    RAM64(in=in , load=loadA , address=address[0..5] , out=oa );
    RAM64(in=in , load=loadB , address=address[0..5] , out=ob );
    RAM64(in=in , load=loadC , address=address[0..5] , out=oc );
    RAM64(in=in , load=loadD , address=address[0..5] , out=od );
    RAM64(in=in , load=loadE , address=address[0..5] , out=oe );
    RAM64(in=in , load=loadF , address=address[0..5] , out=of );
    RAM64(in=in , load=loadG , address=address[0..5] , out=og );
    RAM64(in=in , load=loadH , address=address[0..5] , out=oh );

    Mux8Way16(a=oa , b=ob , c=oc , d=od , e=oe , f=of , g=og , h=oh , sel=address[6..8] , out=out );

}