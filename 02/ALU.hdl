// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //// Replace this comment with your code.
    // Zero the 16 bit input
    // combine those zx and nx input, hence Mux16
    Mux16(a=x , b=false , sel=zx , out=zeroX );
    Mux16(a=y , b=false , sel=zy , out=zeroY );

    // Negate the 16 bit input
    Not16(in=zeroX , out=negX );
    Mux16(a=zeroX , b=negX , sel=nx , out=contX );
    Not16(in=zeroY , out=negY );
    Mux16(a=zeroY , b=negY , sel=ny , out=contY );

    // bit select f; +/ AND -> Add16 or And16
    Add16(a =contX , b =contY , out =add16XY );
    And16(a=contX , b=contY , out=and16XY );
    // when f==0, out = x&y; when f==1, out = x+y
    // choose between them
    Mux16(a=and16XY , b=add16XY , sel=f , out=fXY );
    
    // Negate the output
    Not16(in=fXY , out=negfXY );

    // To check if negative
    //define out[15]=ng based on 2's complement, where if msb = 1, it is a negative number
    // for Mux16, when sel=0, out=a; sel=1, out=b
    Mux16(a=fXY , b=negfXY , sel=no , out=out, out[0..7]=lsb, out[8..15]=msb, out[15]=ng );
    Or8Way(in=msb , out=zr1 );
    Or8Way(in=lsb , out=zr2 );
    Or(a=zr1 , b=zr2 , out=zrFinal );
    Not(in=zrFinal , out=zr );


}